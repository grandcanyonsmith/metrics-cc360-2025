{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:60638';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Fetch all dashboard summary metrics\nexport const fetchDashboardMetrics = async (startDate, endDate) => {\n  try {\n    const response = await api.get('/api/dashboard_metrics', {\n      params: {\n        start: startDate,\n        end: endDate\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching dashboard metrics:', error);\n    throw error;\n  }\n};\n\n// Micro-API functions for each metric's details\nexport const fetchDormantAccountRateDetails = (startDate, endDate, extraParams = {}) => fetchMetricDetails('dormant_account_rate', startDate, endDate, extraParams);\nexport const fetchInvoluntaryChurnRateDetails = (startDate, endDate, extraParams = {}) => fetchMetricDetails('involuntary_churn_rate', startDate, endDate, extraParams);\nexport const fetchDunningRecoveryRateDetails = (startDate, endDate, extraParams = {}) => fetchMetricDetails('dunning_recovery_rate', startDate, endDate, extraParams);\nexport const fetchT24hActivationRateDetails = (startDate, endDate, extraParams = {}) => fetchMetricDetails('t24h_activation_rate', startDate, endDate, extraParams);\nexport const fetchSourceAttributionCoverageDetails = (startDate, endDate, extraParams = {}) => fetchMetricDetails('source_attribution_coverage', startDate, endDate, extraParams);\nexport const fetchPlatformBreakdownDetails = (startDate, endDate, extraParams = {}) => fetchMetricDetails('platform_breakdown', startDate, endDate, extraParams);\nexport const fetchRootCauseParetoDetails = (startDate, endDate, extraParams = {}) => fetchMetricDetails('root_cause_pareto', startDate, endDate, extraParams);\nexport const fetchDailyTrendsDetails = (startDate, endDate, extraParams = {}) => fetchMetricDetails('daily_trends', startDate, endDate, extraParams);\n\n// Generic fetch for metric details\nexport const fetchMetricDetails = async (metric, startDate, endDate, extraParams = {}) => {\n  try {\n    const response = await api.get('/api/dashboard_metric_rows', {\n      params: {\n        metric,\n        start: startDate,\n        end: endDate,\n        ...extraParams\n      }\n    });\n    return response.data.rows || [];\n  } catch (error) {\n    console.error(`Error fetching ${metric} details:`, error);\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","fetchDashboardMetrics","startDate","endDate","response","get","params","start","end","data","error","console","fetchDormantAccountRateDetails","extraParams","fetchMetricDetails","fetchInvoluntaryChurnRateDetails","fetchDunningRecoveryRateDetails","fetchT24hActivationRateDetails","fetchSourceAttributionCoverageDetails","fetchPlatformBreakdownDetails","fetchRootCauseParetoDetails","fetchDailyTrendsDetails","metric","rows"],"sources":["/Users/canyonsmith/Desktop/metrics-cc360-2025/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:60638';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Fetch all dashboard summary metrics\nexport const fetchDashboardMetrics = async (startDate, endDate) => {\n  try {\n    const response = await api.get('/api/dashboard_metrics', {\n      params: { start: startDate, end: endDate },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching dashboard metrics:', error);\n    throw error;\n  }\n};\n\n// Micro-API functions for each metric's details\nexport const fetchDormantAccountRateDetails = (startDate, endDate, extraParams = {}) =>\n  fetchMetricDetails('dormant_account_rate', startDate, endDate, extraParams);\n\nexport const fetchInvoluntaryChurnRateDetails = (startDate, endDate, extraParams = {}) =>\n  fetchMetricDetails('involuntary_churn_rate', startDate, endDate, extraParams);\n\nexport const fetchDunningRecoveryRateDetails = (startDate, endDate, extraParams = {}) =>\n  fetchMetricDetails('dunning_recovery_rate', startDate, endDate, extraParams);\n\nexport const fetchT24hActivationRateDetails = (startDate, endDate, extraParams = {}) =>\n  fetchMetricDetails('t24h_activation_rate', startDate, endDate, extraParams);\n\nexport const fetchSourceAttributionCoverageDetails = (startDate, endDate, extraParams = {}) =>\n  fetchMetricDetails('source_attribution_coverage', startDate, endDate, extraParams);\n\nexport const fetchPlatformBreakdownDetails = (startDate, endDate, extraParams = {}) =>\n  fetchMetricDetails('platform_breakdown', startDate, endDate, extraParams);\n\nexport const fetchRootCauseParetoDetails = (startDate, endDate, extraParams = {}) =>\n  fetchMetricDetails('root_cause_pareto', startDate, endDate, extraParams);\n\nexport const fetchDailyTrendsDetails = (startDate, endDate, extraParams = {}) =>\n  fetchMetricDetails('daily_trends', startDate, endDate, extraParams);\n\n// Generic fetch for metric details\nexport const fetchMetricDetails = async (metric, startDate, endDate, extraParams = {}) => {\n  try {\n    const response = await api.get('/api/dashboard_metric_rows', {\n      params: { metric, start: startDate, end: endDate, ...extraParams },\n    });\n    return response.data.rows || [];\n  } catch (error) {\n    console.error(`Error fetching ${metric} details:`, error);\n    throw error;\n  }\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}